import os
import json
import textwrap

def indent(str, n = 1, predicate = None):
  return textwrap.indent(str, "  " * n, predicate)

def snippet_struct_declaration(host_identifier, struct_fields, type_identifier):
  str = (f'struct control_{type_identifier}_{host_identifier} : public '
    f'control_{type_identifier}_base {{\n')
  for field in struct_fields:
    initializer = f'{{{field["default"]}}}' if "default" in field else ""
    str += indent(f'{field["type"]} {field["name"]}{initializer};\n')
  return str + f'}};\n'

# def snippet_struct_field_names(host_identifier, struct_fields, type_identifier):
#   str = f'std::array<std::string, {len(struct_fields)}> field_names(\n'
#   str += indent(f'control_{type_identifier}_{host_identifier} '
#     f'const &) {{\n', 2)
#   str += indent(f'return {{{{\n')
#   for field in struct_fields:
#     str += indent(f'{{"{field["name"]}"}}\n', 2)
#   str += indent(f'}}}};\n')
#   return str + f'}}\n'

def snippet_as_sensor(host_identifier, struct_fields, type_identifier):
  str = f'sensors::control_{type_identifier}_{host_identifier} as_sensor(\n'
  str += indent(f'control_{type_identifier}_{host_identifier} '
    f'const &{type_identifier},\n'
    f'std::optional<cc::timestamp_duration_t> const &timestamp = {{}}) {{\n', 2)
  str += indent(f'return {{as_sensor(static_cast<control_'
    f'{type_identifier}_base>({type_identifier}), timestamp),\n')
  for field in struct_fields:
    str += indent(f'{{{type_identifier}.{field["name"]}}},\n', 2)
  str += indent(f'}};\n')
  return str + f'}}\n'

def snippet_type_conditionals(control_structs, type_identifier):
  str = f'control_{type_identifier}_base'
  for host_identifier, _ in reversed(control_structs.items()):
    str = (f'std::conditional<cc::host == cc::Host::{host_identifier},\n'
      f'control_{type_identifier}_{host_identifier},\n'
      f'{str}>::type')
  return f'using control_{type_identifier} =\n' + indent(f'{str};\n')

def control_cpp_include(control_structs):
  str = f''
  sep = f'\n'

  rel_file_path = os.path.relpath(__file__,
    os.path.join(os.path.dirname(__file__), "..", "src"))
  str += f'// File generated by `{rel_file_path}`\n' + sep

  str += f'namespace control {{\n' + sep

  type_identifiers = ["state", "params"]

  # str += snippet_â€¦() + sep

  for snippet in [snippet_struct_declaration, snippet_as_sensor]:
    for host_identifier, host_structs in control_structs.items():
      for type_identifier in type_identifiers:
        struct_fields = host_structs[f'struct_{type_identifier}']
        str += indent(snippet(host_identifier, struct_fields, type_identifier)
          + sep)

  for type_identifier in type_identifiers:
    str += indent(snippet_type_conditionals(control_structs, type_identifier)
      + sep)

  return str + f'}} // namespace control\n'

control_structs_json_filename = os.path.join(os.path.dirname(__file__),
  "control-structs.json")
control_cpp_filename = os.path.join(os.path.dirname(__file__), "..", "src",
  "control.generated.cpp")

with open(control_structs_json_filename, "r") as f:
  control_structs = json.load(f)

control_cpp_include_str = control_cpp_include(control_structs)

with open(control_cpp_filename, "w") as f:
  f.write(control_cpp_include_str)

